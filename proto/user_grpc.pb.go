// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 用户
	UserRegister(ctx context.Context, in *UserInfoRegister, opts ...grpc.CallOption) (*empty.Empty, error)
	UserResetPassword(ctx context.Context, in *UserInfoResetPassword, opts ...grpc.CallOption) (*UserInfo, error)
	UserPurview(ctx context.Context, in *UserInfoPurview, opts ...grpc.CallOption) (*empty.Empty, error)
	UserCheckPassword(ctx context.Context, in *UserInfoCheckPassword, opts ...grpc.CallOption) (*UserInfoCheckResponse, error)
	UserByID(ctx context.Context, in *UserInfoByID, opts ...grpc.CallOption) (*UserInfo, error)
	UserByName(ctx context.Context, in *UserInfoByName, opts ...grpc.CallOption) (*UserInfo, error)
	UserByMobile(ctx context.Context, in *UserInfoByMobile, opts ...grpc.CallOption) (*UserInfo, error)
	// 业务目录
	DirectoryRegister(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DirectoryChange(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DirectoryList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DirectoryListResponse, error)
	DirectoryDelete(ctx context.Context, in *DirectoryDeleteID, opts ...grpc.CallOption) (*empty.Empty, error)
	// 目录关联用户
	UserCraterDirectory(ctx context.Context, in *UserCraterDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error)
	UserDeleteDirectory(ctx context.Context, in *UserCraterDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error)
	UserListDirectory(ctx context.Context, in *UserListDirectoryID, opts ...grpc.CallOption) (*DirectoryListResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserRegister(ctx context.Context, in *UserInfoRegister, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserResetPassword(ctx context.Context, in *UserInfoResetPassword, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/User/UserResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserPurview(ctx context.Context, in *UserInfoPurview, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserPurview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserCheckPassword(ctx context.Context, in *UserInfoCheckPassword, opts ...grpc.CallOption) (*UserInfoCheckResponse, error) {
	out := new(UserInfoCheckResponse)
	err := c.cc.Invoke(ctx, "/User/UserCheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserByID(ctx context.Context, in *UserInfoByID, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/User/UserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserByName(ctx context.Context, in *UserInfoByName, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/User/UserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserByMobile(ctx context.Context, in *UserInfoByMobile, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/User/UserByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryRegister(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/DirectoryRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryChange(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/DirectoryChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DirectoryListResponse, error) {
	out := new(DirectoryListResponse)
	err := c.cc.Invoke(ctx, "/User/DirectoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryDelete(ctx context.Context, in *DirectoryDeleteID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/DirectoryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserCraterDirectory(ctx context.Context, in *UserCraterDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserCraterDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserDeleteDirectory(ctx context.Context, in *UserCraterDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserDeleteDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserListDirectory(ctx context.Context, in *UserListDirectoryID, opts ...grpc.CallOption) (*DirectoryListResponse, error) {
	out := new(DirectoryListResponse)
	err := c.cc.Invoke(ctx, "/User/UserListDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 用户
	UserRegister(context.Context, *UserInfoRegister) (*empty.Empty, error)
	UserResetPassword(context.Context, *UserInfoResetPassword) (*UserInfo, error)
	UserPurview(context.Context, *UserInfoPurview) (*empty.Empty, error)
	UserCheckPassword(context.Context, *UserInfoCheckPassword) (*UserInfoCheckResponse, error)
	UserByID(context.Context, *UserInfoByID) (*UserInfo, error)
	UserByName(context.Context, *UserInfoByName) (*UserInfo, error)
	UserByMobile(context.Context, *UserInfoByMobile) (*UserInfo, error)
	// 业务目录
	DirectoryRegister(context.Context, *DirectoryInfoRequest) (*empty.Empty, error)
	DirectoryChange(context.Context, *DirectoryInfoRequest) (*empty.Empty, error)
	DirectoryList(context.Context, *empty.Empty) (*DirectoryListResponse, error)
	DirectoryDelete(context.Context, *DirectoryDeleteID) (*empty.Empty, error)
	// 目录关联用户
	UserCraterDirectory(context.Context, *UserCraterDirectoryID) (*empty.Empty, error)
	UserDeleteDirectory(context.Context, *UserCraterDirectoryID) (*empty.Empty, error)
	UserListDirectory(context.Context, *UserListDirectoryID) (*DirectoryListResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UserRegister(context.Context, *UserInfoRegister) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServer) UserResetPassword(context.Context, *UserInfoResetPassword) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserResetPassword not implemented")
}
func (UnimplementedUserServer) UserPurview(context.Context, *UserInfoPurview) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPurview not implemented")
}
func (UnimplementedUserServer) UserCheckPassword(context.Context, *UserInfoCheckPassword) (*UserInfoCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckPassword not implemented")
}
func (UnimplementedUserServer) UserByID(context.Context, *UserInfoByID) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByID not implemented")
}
func (UnimplementedUserServer) UserByName(context.Context, *UserInfoByName) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByName not implemented")
}
func (UnimplementedUserServer) UserByMobile(context.Context, *UserInfoByMobile) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByMobile not implemented")
}
func (UnimplementedUserServer) DirectoryRegister(context.Context, *DirectoryInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryRegister not implemented")
}
func (UnimplementedUserServer) DirectoryChange(context.Context, *DirectoryInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryChange not implemented")
}
func (UnimplementedUserServer) DirectoryList(context.Context, *empty.Empty) (*DirectoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryList not implemented")
}
func (UnimplementedUserServer) DirectoryDelete(context.Context, *DirectoryDeleteID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryDelete not implemented")
}
func (UnimplementedUserServer) UserCraterDirectory(context.Context, *UserCraterDirectoryID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCraterDirectory not implemented")
}
func (UnimplementedUserServer) UserDeleteDirectory(context.Context, *UserCraterDirectoryID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteDirectory not implemented")
}
func (UnimplementedUserServer) UserListDirectory(context.Context, *UserListDirectoryID) (*DirectoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserListDirectory not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserRegister(ctx, req.(*UserInfoRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserResetPassword(ctx, req.(*UserInfoResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserPurview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoPurview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserPurview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserPurview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserPurview(ctx, req.(*UserInfoPurview))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserCheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoCheckPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserCheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserCheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserCheckPassword(ctx, req.(*UserInfoCheckPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserByID(ctx, req.(*UserInfoByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserByName(ctx, req.(*UserInfoByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoByMobile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserByMobile(ctx, req.(*UserInfoByMobile))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryRegister(ctx, req.(*DirectoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryChange(ctx, req.(*DirectoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryDeleteID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryDelete(ctx, req.(*DirectoryDeleteID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserCraterDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCraterDirectoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserCraterDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserCraterDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserCraterDirectory(ctx, req.(*UserCraterDirectoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserDeleteDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCraterDirectoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserDeleteDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserDeleteDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserDeleteDirectory(ctx, req.(*UserCraterDirectoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListDirectoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserListDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserListDirectory(ctx, req.(*UserListDirectoryID))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _User_UserRegister_Handler,
		},
		{
			MethodName: "UserResetPassword",
			Handler:    _User_UserResetPassword_Handler,
		},
		{
			MethodName: "UserPurview",
			Handler:    _User_UserPurview_Handler,
		},
		{
			MethodName: "UserCheckPassword",
			Handler:    _User_UserCheckPassword_Handler,
		},
		{
			MethodName: "UserByID",
			Handler:    _User_UserByID_Handler,
		},
		{
			MethodName: "UserByName",
			Handler:    _User_UserByName_Handler,
		},
		{
			MethodName: "UserByMobile",
			Handler:    _User_UserByMobile_Handler,
		},
		{
			MethodName: "DirectoryRegister",
			Handler:    _User_DirectoryRegister_Handler,
		},
		{
			MethodName: "DirectoryChange",
			Handler:    _User_DirectoryChange_Handler,
		},
		{
			MethodName: "DirectoryList",
			Handler:    _User_DirectoryList_Handler,
		},
		{
			MethodName: "DirectoryDelete",
			Handler:    _User_DirectoryDelete_Handler,
		},
		{
			MethodName: "UserCraterDirectory",
			Handler:    _User_UserCraterDirectory_Handler,
		},
		{
			MethodName: "UserDeleteDirectory",
			Handler:    _User_UserDeleteDirectory_Handler,
		},
		{
			MethodName: "UserListDirectory",
			Handler:    _User_UserListDirectory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
