// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 用户
	UserRegister(ctx context.Context, in *UserInfoRegister, opts ...grpc.CallOption) (*empty.Empty, error)
	UserResetPassword(ctx context.Context, in *UserInfoResetPassword, opts ...grpc.CallOption) (*UserInfo, error)
	UserPurview(ctx context.Context, in *UserInfoPurview, opts ...grpc.CallOption) (*empty.Empty, error)
	UserCheckPassword(ctx context.Context, in *UserInfoCheckPassword, opts ...grpc.CallOption) (*UserInfoCheckResponse, error)
	UserByID(ctx context.Context, in *UserInfoByID, opts ...grpc.CallOption) (*UserInfo, error)
	UserByName(ctx context.Context, in *UserInfoByName, opts ...grpc.CallOption) (*UserInfo, error)
	UserByMobile(ctx context.Context, in *UserInfoByMobile, opts ...grpc.CallOption) (*UserInfo, error)
	// 业务目录
	DirectoryHomeRegister(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DirectoryHomeChange(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DirectoryHomeList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DirectoryListIDResponse, error)
	DirectoryHomeDelete(ctx context.Context, in *DirectoryDeleteID, opts ...grpc.CallOption) (*empty.Empty, error)
	DirectoryRegister(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DirectoryChange(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DirectoryList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DirectoryListIDResponse, error)
	DirectoryDelete(ctx context.Context, in *DirectoryDeleteID, opts ...grpc.CallOption) (*empty.Empty, error)
	// 目录关联用户
	UserCraterHomeDirectory(ctx context.Context, in *UserCraterHomeDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error)
	UserDeleteHomeDirectory(ctx context.Context, in *UserCraterHomeDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error)
	UserCraterDirectory(ctx context.Context, in *UserCraterDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error)
	UserDeleteDirectory(ctx context.Context, in *UserCraterDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error)
	UserListHomeDirectory(ctx context.Context, in *UserListDirectoryID, opts ...grpc.CallOption) (*DirectoryListResponse, error)
	// 用户首页卡片
	UserHomeParametersRegister(ctx context.Context, in *HomeParametersRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UserHomeParametersById(ctx context.Context, in *HomeParametersUserId, opts ...grpc.CallOption) (*HomeParametersListResponse, error)
	UserHomeParametersChange(ctx context.Context, in *HomeParametersResponse, opts ...grpc.CallOption) (*empty.Empty, error)
	UserHomeParametersDelete(ctx context.Context, in *HomeParametersId, opts ...grpc.CallOption) (*empty.Empty, error)
	UserHomeParametersIsTab(ctx context.Context, in *HomeParametersId, opts ...grpc.CallOption) (*empty.Empty, error)
	// 记录用户上传
	UserHomeUpdateLog(ctx context.Context, in *HomeUpdateLogRequest, opts ...grpc.CallOption) (*HomeUpdateLogListResponse, error)
	// 用户图片
	UserImageUpdate(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UserImageQueryId(ctx context.Context, in *ImageRequestId, opts ...grpc.CallOption) (*ImageListResponse, error)
	UserImageQueryImageId(ctx context.Context, in *ImageRequestId, opts ...grpc.CallOption) (*ImageListResponse, error)
	UserImageId(ctx context.Context, in *ImageRequestId, opts ...grpc.CallOption) (*empty.Empty, error)
	UserImageNameId(ctx context.Context, in *ImageRequestId, opts ...grpc.CallOption) (*empty.Empty, error)
	UserImageResetId(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UserImageCreateName(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserRegister(ctx context.Context, in *UserInfoRegister, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserResetPassword(ctx context.Context, in *UserInfoResetPassword, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/User/UserResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserPurview(ctx context.Context, in *UserInfoPurview, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserPurview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserCheckPassword(ctx context.Context, in *UserInfoCheckPassword, opts ...grpc.CallOption) (*UserInfoCheckResponse, error) {
	out := new(UserInfoCheckResponse)
	err := c.cc.Invoke(ctx, "/User/UserCheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserByID(ctx context.Context, in *UserInfoByID, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/User/UserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserByName(ctx context.Context, in *UserInfoByName, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/User/UserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserByMobile(ctx context.Context, in *UserInfoByMobile, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/User/UserByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryHomeRegister(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/DirectoryHomeRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryHomeChange(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/DirectoryHomeChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryHomeList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DirectoryListIDResponse, error) {
	out := new(DirectoryListIDResponse)
	err := c.cc.Invoke(ctx, "/User/DirectoryHomeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryHomeDelete(ctx context.Context, in *DirectoryDeleteID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/DirectoryHomeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryRegister(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/DirectoryRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryChange(ctx context.Context, in *DirectoryInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/DirectoryChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DirectoryListIDResponse, error) {
	out := new(DirectoryListIDResponse)
	err := c.cc.Invoke(ctx, "/User/DirectoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DirectoryDelete(ctx context.Context, in *DirectoryDeleteID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/DirectoryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserCraterHomeDirectory(ctx context.Context, in *UserCraterHomeDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserCraterHomeDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserDeleteHomeDirectory(ctx context.Context, in *UserCraterHomeDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserDeleteHomeDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserCraterDirectory(ctx context.Context, in *UserCraterDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserCraterDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserDeleteDirectory(ctx context.Context, in *UserCraterDirectoryID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserDeleteDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserListHomeDirectory(ctx context.Context, in *UserListDirectoryID, opts ...grpc.CallOption) (*DirectoryListResponse, error) {
	out := new(DirectoryListResponse)
	err := c.cc.Invoke(ctx, "/User/UserListHomeDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserHomeParametersRegister(ctx context.Context, in *HomeParametersRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserHomeParametersRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserHomeParametersById(ctx context.Context, in *HomeParametersUserId, opts ...grpc.CallOption) (*HomeParametersListResponse, error) {
	out := new(HomeParametersListResponse)
	err := c.cc.Invoke(ctx, "/User/UserHomeParametersById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserHomeParametersChange(ctx context.Context, in *HomeParametersResponse, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserHomeParametersChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserHomeParametersDelete(ctx context.Context, in *HomeParametersId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserHomeParametersDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserHomeParametersIsTab(ctx context.Context, in *HomeParametersId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserHomeParametersIsTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserHomeUpdateLog(ctx context.Context, in *HomeUpdateLogRequest, opts ...grpc.CallOption) (*HomeUpdateLogListResponse, error) {
	out := new(HomeUpdateLogListResponse)
	err := c.cc.Invoke(ctx, "/User/UserHomeUpdateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserImageUpdate(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserImageUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserImageQueryId(ctx context.Context, in *ImageRequestId, opts ...grpc.CallOption) (*ImageListResponse, error) {
	out := new(ImageListResponse)
	err := c.cc.Invoke(ctx, "/User/UserImageQueryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserImageQueryImageId(ctx context.Context, in *ImageRequestId, opts ...grpc.CallOption) (*ImageListResponse, error) {
	out := new(ImageListResponse)
	err := c.cc.Invoke(ctx, "/User/UserImageQueryImageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserImageId(ctx context.Context, in *ImageRequestId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserImageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserImageNameId(ctx context.Context, in *ImageRequestId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserImageNameId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserImageResetId(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/User/UserImageResetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserImageCreateName(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/User/UserImageCreateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 用户
	UserRegister(context.Context, *UserInfoRegister) (*empty.Empty, error)
	UserResetPassword(context.Context, *UserInfoResetPassword) (*UserInfo, error)
	UserPurview(context.Context, *UserInfoPurview) (*empty.Empty, error)
	UserCheckPassword(context.Context, *UserInfoCheckPassword) (*UserInfoCheckResponse, error)
	UserByID(context.Context, *UserInfoByID) (*UserInfo, error)
	UserByName(context.Context, *UserInfoByName) (*UserInfo, error)
	UserByMobile(context.Context, *UserInfoByMobile) (*UserInfo, error)
	// 业务目录
	DirectoryHomeRegister(context.Context, *DirectoryInfoRequest) (*empty.Empty, error)
	DirectoryHomeChange(context.Context, *DirectoryInfoRequest) (*empty.Empty, error)
	DirectoryHomeList(context.Context, *empty.Empty) (*DirectoryListIDResponse, error)
	DirectoryHomeDelete(context.Context, *DirectoryDeleteID) (*empty.Empty, error)
	DirectoryRegister(context.Context, *DirectoryInfoRequest) (*empty.Empty, error)
	DirectoryChange(context.Context, *DirectoryInfoRequest) (*empty.Empty, error)
	DirectoryList(context.Context, *empty.Empty) (*DirectoryListIDResponse, error)
	DirectoryDelete(context.Context, *DirectoryDeleteID) (*empty.Empty, error)
	// 目录关联用户
	UserCraterHomeDirectory(context.Context, *UserCraterHomeDirectoryID) (*empty.Empty, error)
	UserDeleteHomeDirectory(context.Context, *UserCraterHomeDirectoryID) (*empty.Empty, error)
	UserCraterDirectory(context.Context, *UserCraterDirectoryID) (*empty.Empty, error)
	UserDeleteDirectory(context.Context, *UserCraterDirectoryID) (*empty.Empty, error)
	UserListHomeDirectory(context.Context, *UserListDirectoryID) (*DirectoryListResponse, error)
	// 用户首页卡片
	UserHomeParametersRegister(context.Context, *HomeParametersRequest) (*empty.Empty, error)
	UserHomeParametersById(context.Context, *HomeParametersUserId) (*HomeParametersListResponse, error)
	UserHomeParametersChange(context.Context, *HomeParametersResponse) (*empty.Empty, error)
	UserHomeParametersDelete(context.Context, *HomeParametersId) (*empty.Empty, error)
	UserHomeParametersIsTab(context.Context, *HomeParametersId) (*empty.Empty, error)
	// 记录用户上传
	UserHomeUpdateLog(context.Context, *HomeUpdateLogRequest) (*HomeUpdateLogListResponse, error)
	// 用户图片
	UserImageUpdate(context.Context, *ImageRequest) (*empty.Empty, error)
	UserImageQueryId(context.Context, *ImageRequestId) (*ImageListResponse, error)
	UserImageQueryImageId(context.Context, *ImageRequestId) (*ImageListResponse, error)
	UserImageId(context.Context, *ImageRequestId) (*empty.Empty, error)
	UserImageNameId(context.Context, *ImageRequestId) (*empty.Empty, error)
	UserImageResetId(context.Context, *ImageRequest) (*empty.Empty, error)
	UserImageCreateName(context.Context, *ImageRequest) (*ImageResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UserRegister(context.Context, *UserInfoRegister) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServer) UserResetPassword(context.Context, *UserInfoResetPassword) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserResetPassword not implemented")
}
func (UnimplementedUserServer) UserPurview(context.Context, *UserInfoPurview) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPurview not implemented")
}
func (UnimplementedUserServer) UserCheckPassword(context.Context, *UserInfoCheckPassword) (*UserInfoCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckPassword not implemented")
}
func (UnimplementedUserServer) UserByID(context.Context, *UserInfoByID) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByID not implemented")
}
func (UnimplementedUserServer) UserByName(context.Context, *UserInfoByName) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByName not implemented")
}
func (UnimplementedUserServer) UserByMobile(context.Context, *UserInfoByMobile) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByMobile not implemented")
}
func (UnimplementedUserServer) DirectoryHomeRegister(context.Context, *DirectoryInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryHomeRegister not implemented")
}
func (UnimplementedUserServer) DirectoryHomeChange(context.Context, *DirectoryInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryHomeChange not implemented")
}
func (UnimplementedUserServer) DirectoryHomeList(context.Context, *empty.Empty) (*DirectoryListIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryHomeList not implemented")
}
func (UnimplementedUserServer) DirectoryHomeDelete(context.Context, *DirectoryDeleteID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryHomeDelete not implemented")
}
func (UnimplementedUserServer) DirectoryRegister(context.Context, *DirectoryInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryRegister not implemented")
}
func (UnimplementedUserServer) DirectoryChange(context.Context, *DirectoryInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryChange not implemented")
}
func (UnimplementedUserServer) DirectoryList(context.Context, *empty.Empty) (*DirectoryListIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryList not implemented")
}
func (UnimplementedUserServer) DirectoryDelete(context.Context, *DirectoryDeleteID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectoryDelete not implemented")
}
func (UnimplementedUserServer) UserCraterHomeDirectory(context.Context, *UserCraterHomeDirectoryID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCraterHomeDirectory not implemented")
}
func (UnimplementedUserServer) UserDeleteHomeDirectory(context.Context, *UserCraterHomeDirectoryID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteHomeDirectory not implemented")
}
func (UnimplementedUserServer) UserCraterDirectory(context.Context, *UserCraterDirectoryID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCraterDirectory not implemented")
}
func (UnimplementedUserServer) UserDeleteDirectory(context.Context, *UserCraterDirectoryID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteDirectory not implemented")
}
func (UnimplementedUserServer) UserListHomeDirectory(context.Context, *UserListDirectoryID) (*DirectoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserListHomeDirectory not implemented")
}
func (UnimplementedUserServer) UserHomeParametersRegister(context.Context, *HomeParametersRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomeParametersRegister not implemented")
}
func (UnimplementedUserServer) UserHomeParametersById(context.Context, *HomeParametersUserId) (*HomeParametersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomeParametersById not implemented")
}
func (UnimplementedUserServer) UserHomeParametersChange(context.Context, *HomeParametersResponse) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomeParametersChange not implemented")
}
func (UnimplementedUserServer) UserHomeParametersDelete(context.Context, *HomeParametersId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomeParametersDelete not implemented")
}
func (UnimplementedUserServer) UserHomeParametersIsTab(context.Context, *HomeParametersId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomeParametersIsTab not implemented")
}
func (UnimplementedUserServer) UserHomeUpdateLog(context.Context, *HomeUpdateLogRequest) (*HomeUpdateLogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHomeUpdateLog not implemented")
}
func (UnimplementedUserServer) UserImageUpdate(context.Context, *ImageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImageUpdate not implemented")
}
func (UnimplementedUserServer) UserImageQueryId(context.Context, *ImageRequestId) (*ImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImageQueryId not implemented")
}
func (UnimplementedUserServer) UserImageQueryImageId(context.Context, *ImageRequestId) (*ImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImageQueryImageId not implemented")
}
func (UnimplementedUserServer) UserImageId(context.Context, *ImageRequestId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImageId not implemented")
}
func (UnimplementedUserServer) UserImageNameId(context.Context, *ImageRequestId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImageNameId not implemented")
}
func (UnimplementedUserServer) UserImageResetId(context.Context, *ImageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImageResetId not implemented")
}
func (UnimplementedUserServer) UserImageCreateName(context.Context, *ImageRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImageCreateName not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserRegister(ctx, req.(*UserInfoRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserResetPassword(ctx, req.(*UserInfoResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserPurview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoPurview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserPurview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserPurview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserPurview(ctx, req.(*UserInfoPurview))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserCheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoCheckPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserCheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserCheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserCheckPassword(ctx, req.(*UserInfoCheckPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserByID(ctx, req.(*UserInfoByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserByName(ctx, req.(*UserInfoByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoByMobile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserByMobile(ctx, req.(*UserInfoByMobile))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryHomeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryHomeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryHomeRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryHomeRegister(ctx, req.(*DirectoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryHomeChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryHomeChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryHomeChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryHomeChange(ctx, req.(*DirectoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryHomeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryHomeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryHomeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryHomeList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryHomeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryDeleteID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryHomeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryHomeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryHomeDelete(ctx, req.(*DirectoryDeleteID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryRegister(ctx, req.(*DirectoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryChange(ctx, req.(*DirectoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DirectoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryDeleteID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DirectoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/DirectoryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DirectoryDelete(ctx, req.(*DirectoryDeleteID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserCraterHomeDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCraterHomeDirectoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserCraterHomeDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserCraterHomeDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserCraterHomeDirectory(ctx, req.(*UserCraterHomeDirectoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserDeleteHomeDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCraterHomeDirectoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserDeleteHomeDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserDeleteHomeDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserDeleteHomeDirectory(ctx, req.(*UserCraterHomeDirectoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserCraterDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCraterDirectoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserCraterDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserCraterDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserCraterDirectory(ctx, req.(*UserCraterDirectoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserDeleteDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCraterDirectoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserDeleteDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserDeleteDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserDeleteDirectory(ctx, req.(*UserCraterDirectoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserListHomeDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListDirectoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserListHomeDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserListHomeDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserListHomeDirectory(ctx, req.(*UserListDirectoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserHomeParametersRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserHomeParametersRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserHomeParametersRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserHomeParametersRegister(ctx, req.(*HomeParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserHomeParametersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeParametersUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserHomeParametersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserHomeParametersById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserHomeParametersById(ctx, req.(*HomeParametersUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserHomeParametersChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeParametersResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserHomeParametersChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserHomeParametersChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserHomeParametersChange(ctx, req.(*HomeParametersResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserHomeParametersDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeParametersId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserHomeParametersDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserHomeParametersDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserHomeParametersDelete(ctx, req.(*HomeParametersId))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserHomeParametersIsTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeParametersId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserHomeParametersIsTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserHomeParametersIsTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserHomeParametersIsTab(ctx, req.(*HomeParametersId))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserHomeUpdateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeUpdateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserHomeUpdateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserHomeUpdateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserHomeUpdateLog(ctx, req.(*HomeUpdateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserImageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserImageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserImageUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserImageUpdate(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserImageQueryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserImageQueryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserImageQueryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserImageQueryId(ctx, req.(*ImageRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserImageQueryImageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserImageQueryImageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserImageQueryImageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserImageQueryImageId(ctx, req.(*ImageRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserImageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserImageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserImageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserImageId(ctx, req.(*ImageRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserImageNameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserImageNameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserImageNameId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserImageNameId(ctx, req.(*ImageRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserImageResetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserImageResetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserImageResetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserImageResetId(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserImageCreateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserImageCreateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserImageCreateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserImageCreateName(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _User_UserRegister_Handler,
		},
		{
			MethodName: "UserResetPassword",
			Handler:    _User_UserResetPassword_Handler,
		},
		{
			MethodName: "UserPurview",
			Handler:    _User_UserPurview_Handler,
		},
		{
			MethodName: "UserCheckPassword",
			Handler:    _User_UserCheckPassword_Handler,
		},
		{
			MethodName: "UserByID",
			Handler:    _User_UserByID_Handler,
		},
		{
			MethodName: "UserByName",
			Handler:    _User_UserByName_Handler,
		},
		{
			MethodName: "UserByMobile",
			Handler:    _User_UserByMobile_Handler,
		},
		{
			MethodName: "DirectoryHomeRegister",
			Handler:    _User_DirectoryHomeRegister_Handler,
		},
		{
			MethodName: "DirectoryHomeChange",
			Handler:    _User_DirectoryHomeChange_Handler,
		},
		{
			MethodName: "DirectoryHomeList",
			Handler:    _User_DirectoryHomeList_Handler,
		},
		{
			MethodName: "DirectoryHomeDelete",
			Handler:    _User_DirectoryHomeDelete_Handler,
		},
		{
			MethodName: "DirectoryRegister",
			Handler:    _User_DirectoryRegister_Handler,
		},
		{
			MethodName: "DirectoryChange",
			Handler:    _User_DirectoryChange_Handler,
		},
		{
			MethodName: "DirectoryList",
			Handler:    _User_DirectoryList_Handler,
		},
		{
			MethodName: "DirectoryDelete",
			Handler:    _User_DirectoryDelete_Handler,
		},
		{
			MethodName: "UserCraterHomeDirectory",
			Handler:    _User_UserCraterHomeDirectory_Handler,
		},
		{
			MethodName: "UserDeleteHomeDirectory",
			Handler:    _User_UserDeleteHomeDirectory_Handler,
		},
		{
			MethodName: "UserCraterDirectory",
			Handler:    _User_UserCraterDirectory_Handler,
		},
		{
			MethodName: "UserDeleteDirectory",
			Handler:    _User_UserDeleteDirectory_Handler,
		},
		{
			MethodName: "UserListHomeDirectory",
			Handler:    _User_UserListHomeDirectory_Handler,
		},
		{
			MethodName: "UserHomeParametersRegister",
			Handler:    _User_UserHomeParametersRegister_Handler,
		},
		{
			MethodName: "UserHomeParametersById",
			Handler:    _User_UserHomeParametersById_Handler,
		},
		{
			MethodName: "UserHomeParametersChange",
			Handler:    _User_UserHomeParametersChange_Handler,
		},
		{
			MethodName: "UserHomeParametersDelete",
			Handler:    _User_UserHomeParametersDelete_Handler,
		},
		{
			MethodName: "UserHomeParametersIsTab",
			Handler:    _User_UserHomeParametersIsTab_Handler,
		},
		{
			MethodName: "UserHomeUpdateLog",
			Handler:    _User_UserHomeUpdateLog_Handler,
		},
		{
			MethodName: "UserImageUpdate",
			Handler:    _User_UserImageUpdate_Handler,
		},
		{
			MethodName: "UserImageQueryId",
			Handler:    _User_UserImageQueryId_Handler,
		},
		{
			MethodName: "UserImageQueryImageId",
			Handler:    _User_UserImageQueryImageId_Handler,
		},
		{
			MethodName: "UserImageId",
			Handler:    _User_UserImageId_Handler,
		},
		{
			MethodName: "UserImageNameId",
			Handler:    _User_UserImageNameId_Handler,
		},
		{
			MethodName: "UserImageResetId",
			Handler:    _User_UserImageResetId_Handler,
		},
		{
			MethodName: "UserImageCreateName",
			Handler:    _User_UserImageCreateName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
